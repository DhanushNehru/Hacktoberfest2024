What is a Binomial Tree?

A Binomial Tree of order 0 has 1 node. A Binomial Tree of order k can be constructed by taking two binomial trees of order k-1 and making one the leftmost child of the other.

A Binomial Tree of order k the has following properties.

It has exactly 2k nodes.
It has depth as k.
There are exactly kaiCi nodes at depth i for i = 0, 1, . . . , k.
The root has degree k and children of the root are themselves Binomial Trees with order k-1, k-2,.. 0 from left to right.
k = 0 (Single Node)
o
k = 1 (2 nodes)
[We take two k = 0 order Binomial Trees, and
make one as a child of other]
o
/
o
k = 2 (4 nodes)
[We take two k = 1 order Binomial Trees, and
make one as a child of other]
o
/
o o
/
o
k = 3 (8 nodes)
[We take two k = 2 order Binomial Trees, and
make one as a child of other]
o
/ | \
o o o
/ \ |
o o o
/
o

Binomial Heap:

A Binomial Heap is a set of Binomial Trees where each Binomial Tree follows the Min Heap property. And there can be at most one Binomial Tree of any degree.
Examples Binomial Heap:

12------------10--------------------20
/ \ / |
15 50 70 50 40
| / | |
30 80 85 65
|
100
A Binomial Heap with 13 nodes. It is a collection of 3
Binomial Trees of orders 0, 2, and 3 from left to right.
10--------------------20
/ \ / |
15 50 70 50 40
| / | |
30 80 85 65
|
100
A Binomial Heap with 12 nodes. It is a collection of 2
Binomial Trees of orders 2 and 3 from left to right.

Program to implement Binomial heap:

//...

// Java approach
import java.util.*;

// Class for each node in the Binomial Heap
class Node {
public int value;
public Node parent;
public List children;
public int degree;
public boolean marked;

public Node(int val) {
    value = val;
    parent = null;
    children = new ArrayList<>();
    degree = 0;
    marked = false;
}
}

// Class for the Binomial Heap data structure
class BinomialHeap {
public List trees;
public Node min_node;
public int count;

// Constructor for the Binomial Heap
public BinomialHeap() {
    min_node = null;
    count = 0;
    trees = new ArrayList<>();
}

// Check if the heap is empty
public boolean is_empty() {
    return min_node == null;
}

// Insert a new value into the heap
public void insert(int value) {
    Node node = new Node(value);
    BinomialHeap heap = new BinomialHeap();
    heap.trees.add(node);
    merge(heap);
}

// Get the minimum value in the heap
public int get_min() {
    return min_node.value;
}

// Extract the minimum value from the heap
public int extract_min() {
    Node minNode = min_node;
    trees.remove(minNode);
    BinomialHeap heap = new BinomialHeap();
    heap.trees = minNode.children;
    merge(heap);
    _find_min();
    count -= 1;
    return minNode.value;
}

// Merge two binomial heaps
public void merge(BinomialHeap other_heap) {
    trees.addAll(other_heap.trees);
    count += other_heap.count;
    _find_min();
}

// Find the minimum value in the heap
public void _find_min() {
    min_node = null;
    for (Node tree : trees) {
        if (min_node == null || tree.value < min_node.value) {
            min_node = tree;
        }
    }
}

// Decrease the key of a node
public void decrease_key(Node node, int new_value) {
    if (new_value > node.value) {
        throw new IllegalArgumentException("New value is greater than the current value");
    }
    node.value = new_value;
    _bubble_up(node);
}

// Delete a specific node from the heap
public void delete_node(Node node) {
    decrease_key(node, Integer.MIN_VALUE);
    extract_min();
}

// Perform the bubbling up operation
public void _bubble_up(Node node) {
    Node parent = node.parent;
    while (parent != null && node.value < parent.value) {
        int temp = node.value;
        node.value = parent.value;
        parent.value = temp;
        node = parent;
        parent = node.parent;
    }
}

// Link two trees together
public void _link(Node tree1, Node tree2) {
    if (tree1.value > tree2.value) {
        Node temp = tree1;
        tree1 = tree2;
        tree2 = temp;
    }
    tree2.parent = tree1;
    tree1.children.add(tree2);
    tree1.degree += 1;
}

// Consolidate the trees in the heap
public void _consolidate() {
    int max_degree = (int) Math.floor(Math.log(count) / Math.log(2)) + 1;
    Node[] degree_to_tree = new Node[max_degree + 1];

    while (!trees.isEmpty()) {
        Node current = trees.get(0);
        trees.remove(0);
        int degree = current.degree;
        while (degree_to_tree[degree] != null) {
            Node other = degree_to_tree[degree];
            degree_to_tree[degree] = null;
            if (current.value < other.value) {
                _link(current, other);
            } else {
                _link(other, current);
                current = other;
            }
            degree++;
        }
        degree_to_tree[degree] = current;
    }

    min_node = null;
    trees.clear();
    for (Node tree : degree_to_tree) {
        if (tree != null) {
            trees.add(tree);
            if (min_node == null || tree.value < min_node.value) {
                min_node = tree;
            }
        }
    }
}

// Get the size of the heap
public int size() {
    return count;
}
}
//

// This code is contributed by Mukesh Pal and His Friends Antra Das
Binary Representation of a number and Binomial Heaps
A Binomial Heap with n nodes has the number of Binomial Trees equal to the number of set bits in the binary representation of n. For example, let n be 13, there are 3 set bits in the binary representation of n (00001101), hence 3 Binomial Trees. We can also relate the degree of these Binomial Trees with positions of set bits. With this relation, we can conclude that there are O(Logn) Binomial Trees in a Binomial Heap with ‘n’ nodes.
Operations of Binomial Heap:
The main operation in Binomial Heap is a union(), all other operations mainly use this operation. The union() operation is to combine two Binomial Heaps into one. Let us first discuss other operations, we will discuss union later.

insert(H, k): Inserts a key ‘k’ to Binomial Heap ‘H’. This operation first creates a Binomial Heap with a single key ‘k’, then calls union on H and the new Binomial heap.
getting(H): A simple way to get in() is to traverse the list of the roots of Binomial Trees and return the minimum key. This implementation requires O(Logn) time. It can be optimized to O(1) by maintaining a pointer to the minimum key root.
extracting(H): This operation also uses a union(). We first call getMin() to find the minimum key Binomial Tree, then we remove the node and create a new Binomial Heap by connecting all subtrees of the removed minimum node. Finally, we call union() on H and the newly created Binomial Heap. This operation requires O(Logn) time.
delete(H): Like Binary Heap, the delete operation first reduces the key to minus infinite, then calls extracting().
decrease key(H): decrease key() is also similar to Binary Heap. We compare the decreased key with its parent and if the parent’s key is more, we swap keys and recur for the parent. We stop when we either reach a node whose parent has a smaller key or we hit the root node. The time complexity of the decrease key() is O(Logn).
Union operation in Binomial Heap:
Given two Binomial Heaps H1 and H2, union(H1, H2) creates a single Binomial Heap.
The first step is to simply merge the two Heaps in non-decreasing order of degrees. In the following diagram, figure(b) shows the result after merging.
After the simple merge, we need to make sure that there is at most one Binomial Tree of any order. To do this, we need to combine Binomial Trees of the same order. We traverse the list of merged roots, we keep track of three-pointers, prev, x, and next-x. There can be the following 4 cases when we traverse the list of roots.
—–Case 1: Orders of x and next-x are not the same, we simply move ahead.
In the following 3 cases, orders of x and next-x are the same.
—–Case 2: If the order of next-next-x is also the same, move ahead.
—–Case 3: If the key of x is smaller than or equal to the key of next-x, then make next-x a child of x by linking it with x.
—–Case 4: If the key of x is greater, then make x the child of next.

public class FloydWarshall {

    final static int INF = 99999; // Representing infinite distance

    // Function to implement Floyd-Warshall algorithm
    void floydWarshall(int graph[][], int V) {
        int dist[][] = new int[V][V];

        // Initialize the solution matrix same as input graph matrix
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
            }
        }

        // Adding all vertices one by one as intermediate vertices
        for (int k = 0; k < V; k++) {
            // Pick all vertices as source one by one
            for (int i = 0; i < V; i++) {
                // Pick all vertices as destination for the above picked source
                for (int j = 0; j < V; j++) {
                    // If vertex k is on the shortest path from i to j, then update dist[i][j]
                    if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }

        // Print the shortest distance matrix
        printSolution(dist, V);
    }

    // Function to print the distance matrix
    void printSolution(int dist[][], int V) {
        System.out.println("The following matrix shows the shortest distances between every pair of vertices:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j] + "   ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Number of vertices in the graph
        int V = 4;

        /* Example graph represented as an adjacency matrix
           Graph:
            (0) -- 5 --> (3)
             |        ^    
            10       |  
             v        1   
            (1) -- 3 --> (2)
        */
        int graph[][] = { { 0, 10, INF, 5 },
                          { INF, 0, 3, INF },
                          { INF, INF, 0, 1 },
                          { INF, INF, INF, 0 } };

        // Run Floyd-Warshall algorithm
        FloydWarshall fw = new FloydWarshall();
        fw.floydWarshall(graph, V);
    }
}
